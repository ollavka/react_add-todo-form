{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","getUserById.ts","components/TodoForm/TodoForm.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","classNames","completed","title","TodoList","todos","map","getUserById","userId","users","find","TodoForm","props","onAddTodo","useState","setTitle","titleError","setTitleError","setUserId","userIdError","setUserIdError","action","method","onSubmit","event","preventDefault","str","newTodo","replace","type","value","placeholder","onChange","target","disabled","username","App","getPreparedTodos","todosFromServer","usersFromServer","setTodos","prevTodos","Math","max","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.671a52c3.chunk.js","sourcesContent":["import { FC } from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { TodoWithUser } from '../../types/TodoWithUser';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: TodoWithUser;\n};\n\nexport const TodoInfo: FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={classNames('TodoInfo', {\n      'TodoInfo--completed': todo.completed,\n    })}\n  >\n    <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n\n    {todo.user && (\n      <UserInfo user={todo.user} />\n    )}\n  </article>\n);\n","import { FC } from 'react';\nimport { TodoWithUser } from '../../types/TodoWithUser';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: TodoWithUser[];\n};\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","import { User } from './types/User';\n\nexport const getUserById = (userId: number, users: User[]) => {\n  return users.find(user => user.id === userId) || null;\n};\n","import {\n  FC, useState, FormEvent, ChangeEvent,\n} from 'react';\nimport { TodoWithUser } from '../../types/TodoWithUser';\nimport { User } from '../../types/User';\nimport { getUserById } from '../../getUserById';\n\ntype Props = {\n  users: User[];\n  onAddTodo: (newTodo: TodoWithUser) => void;\n};\n\nexport const TodoForm: FC<Props> = (props) => {\n  const { users, onAddTodo } = props;\n\n  const [title, setTitle] = useState<string>('');\n  const [titleError, setTitleError] = useState<boolean>(false);\n\n  const [userId, setUserId] = useState(0);\n  const [userIdError, setUserIdError] = useState<boolean>(false);\n\n  const sanitizeTitle = (str: string) => {\n    const regex = /[^\\w\\sа-яА-ЯїЇіІ'0-9]/g;\n\n    return str.replace(regex, '');\n  };\n\n  const handleChangeTitle = (event: ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setTitleError(false);\n  };\n\n  const handleChangeUserId = (event: ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setUserIdError(false);\n  };\n\n  const resetForm = () => {\n    setTitle('');\n    setUserId(0);\n\n    setTitleError(false);\n    setUserIdError(false);\n  };\n\n  const onSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    setTitleError(!title);\n    setUserIdError(!userId);\n\n    if (!title || !userId) {\n      return;\n    }\n\n    const newTodo: TodoWithUser = {\n      id: 0,\n      title: sanitizeTitle(title),\n      completed: false,\n      userId,\n      user: getUserById(userId, users),\n    };\n\n    onAddTodo(newTodo);\n    resetForm();\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={onSubmit}\n    >\n      <div className=\"field\">\n        <label>\n          Title:&nbsp;\n\n          <input\n            type=\"text\"\n            value={title}\n            placeholder=\"Enter a title\"\n            onChange={handleChangeTitle}\n            data-cy=\"titleInput\"\n          />\n        </label>\n\n        {titleError && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <label>\n          User:&nbsp;\n\n          <select\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={handleChangeUserId}\n          >\n            <option disabled value=\"0\">\n              Choose a user\n            </option>\n\n            {users.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n\n        {userIdError && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { FC, useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodoForm } from './components/TodoForm';\nimport { TodoWithUser } from './types/TodoWithUser';\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\nimport { getUserById } from './getUserById';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport './App.scss';\n\nconst getPreparedTodos = (todos: Todo[], users: User[]) => {\n  return todos.map(todo => ({\n    ...todo,\n    user: getUserById(todo.userId, users),\n  }));\n};\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<TodoWithUser[]>(\n    getPreparedTodos(todosFromServer, usersFromServer),\n  );\n\n  const getNewTodoId = () => {\n    const maxTodoId = Math.max(...todos.map(todo => todo.id));\n\n    return maxTodoId + 1;\n  };\n\n  const addNewTodo = (newTodo: TodoWithUser) => {\n    setTodos(prevTodos => [...prevTodos, {\n      ...newTodo,\n      id: getNewTodoId(),\n    }]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm\n        users={usersFromServer}\n        onAddTodo={addNewTodo}\n      />\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}